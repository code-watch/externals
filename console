#!/usr/bin/env php
<?php
declare(strict_types = 1);

use Externals\Application\Command\DbCommand;
use Externals\Email\EmailContentParser;
use Externals\Email\EmailRepository;
use Externals\EmailSynchronizer;
use Externals\NotFound;
use Psr\Container\ContainerInterface;
use Silly\Application;
use Symfony\Component\Console\Output\OutputInterface;
use ZBateson\MailMimeParser\MailMimeParser;

/** @var ContainerInterface $container */
$container = require __DIR__ . '/config/bootstrap.php';

$cli = new Application();
$cli->useContainer($container, true, true);

$cli->command('db [--force]', [DbCommand::class, 'setup']);
$cli->command('db-purge [--force]', [DbCommand::class, 'purge']);
$cli->command('db-truncate [--force]', [DbCommand::class, 'truncate']);

$cli->command('sync [max]', function (EmailSynchronizer $synchronizer, OutputInterface $output, int $max = null) {
    $start = microtime(true);
    $synchronizer->synchronize($max);
    $time = microtime(true) - $start;
    $output->writeln("<comment>Emails have been synchronized in $time seconds</comment>");
});

$cli->command('refresh-threads', function (EmailRepository $repository, OutputInterface $output) {
    $start = microtime(true);
    $repository->refreshThreads();
    $time = microtime(true) - $start;
    $output->writeln("<comment>Threads have been refreshed in $time seconds</comment>");
});

$cli->command('reparse', function (EmailRepository $repository, EmailContentParser $parser, OutputInterface $output) {
    $start = microtime(true);
    $maxNumber = $repository->getLastEmailNumber();
    for ($number = $maxNumber; $number > 0; $number--) { // from most recent to first
        try {
            $email = $repository->getByNumber($number);
        } catch (NotFound) {
            continue;
        }
        $parsedDocument = (new MailMimeParser)->parse($email->getSource(), false);
        $content = $parser->parse((string) $parsedDocument->getTextContent());
        $repository->updateContent($email->getId(), $content);
        $output->writeln("<info>Updated email {$number}</info>");
    }
    $time = microtime(true) - $start;
    $output->writeln("<comment>Emails have been reparsed in $time seconds</comment>");
});

$cli->command('container:get id', function (string $id, ContainerInterface $container) {
    var_dump($container->get($id));
});

$cli->run();
